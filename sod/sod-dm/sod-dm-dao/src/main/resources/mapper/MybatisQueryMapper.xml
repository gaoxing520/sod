<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.piesat.dm.mapper.MybatisQueryMapper">

    <!--根据目录查询资料-->
    <select id="getDataClassListBYIn" resultType="java.util.Map">
        <bind name="pattern" value="'%' + className + '%'"/>
        <bind name="pattern" value="'%' + dDataId + '%'"/>
        select
        A.data_class_id,A.class_name,A.parent_id,A.type,A.d_data_id,A.meta_data_name,A.is_all_line,A.use_base_info,B.id
        logic_id,B.logic_flag,B.storage_type,B.database_id,B.is_complete,C.database_name,C.schema_name,C.database_classify,C.stop_use,C.database_define_id,D.database_name
        database_name_f,D.database_instance,D.database_type,E.logic_name
        from T_SOD_DATA_CLASS A
        left join T_SOD_DATA_LOGIC B on A.data_class_id = B.data_class_id
        left join T_SOD_LOGIC_DEFINE E on B.logic_flag=E.logic_flag
        left join T_SOD_DATABASE C on B.database_id=C.id
        left join T_SOD_DATABASE_DEFINE D on C.database_define_id = D.id
        WHERE
        A.data_class_id in
        <foreach collection="classIds" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        <if test="className != null and className != ''">
            AND class_name like #{pattern}
        </if>
        <if test="dDataId != null and dDataId != ''">
            AND A.d_data_id like #{pattern1}
        </if>
    </select>
    <!--根据物理库查询dataLogic（MAP）-->
    <select id="getDataLogicByDatabaseId" parameterType="String" resultType="java.util.Map">
        SELECT A.*,B.D_DATA_ID,B.CLASS_NAME,B.META_DATA_NAME
        FROM T_SOD_DATA_LOGIC A
        LEFT JOIN T_SOD_DATA_CLASS B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID WHERE A.DATABASE_ID = #{databaseId}
    </select>

    <!--查询存储结构概览-->
    <select id="selectStorageConfigurationPageList" parameterType="java.util.Map" resultType="java.util.Map">
        select *,e.database_name special_database_name,ee.database_name database_name
        from t_sod_data_class f
        left join t_sod_data_logic a on (a.DATA_CLASS_ID = f.DATA_CLASS_ID AND f.type = 2 )
        left join t_sod_database e on a.DATABASE_ID = e.id
        left join t_sod_database_define ee on e.database_define_id = ee.id
        left join t_sod_storage_configuration h on (a.DATA_CLASS_ID = h.DATA_CLASS_ID AND a.LOGIC_flag=h.LOGIC_ID AND e.id=h.DATABASE_ID)
        left join t_sod_logic_define c on a.logic_flag = c.logic_flag
        left join t_sod_data_table b on (a.id = b.CLASS_LOGIC_ID	AND b.DB_TABLE_TYPE = 'E')
        <where>
            <if test="map.database_name != null and map.database_name  != ''">
                AND ee.database_name like '${map.database_name}%'
            </if>
            <if test="map.special_database_name != null and map.special_database_name  != ''">
                AND e.database_name like '${map.special_database_name}%'
            </if>
            <if test="map.class_name != null and map.class_name  != ''">
                AND f.class_name like '${map.class_name}%'
            </if>
            <if test="map.parent_id != null and map.parent_id  != ''">
                AND f.data_class_id like '${map.parent_id}%'
            </if>
            <if test="map.d_data_id != null and map.d_data_id  != ''">
                AND b.d_data_id like '${map.d_data_id}%'
            </if>
            <if test="map.logic_name != null and map.logic_name  != ''">
                AND c.logic_name like '${map.logic_name}%'
            </if>
        </where>
    </select>
    <!--修改存储结构概览状态-->
    <update id="updateStorageConfigurationStatus">
        update t_sod_storage_configuration set  ${column} = ${value} where  id = #{id}
    </update>
    <!--修改存储结构概览状态-->
    <select id="getByDatabaseIdAndTableName">
        select a.* from  t_sod_data_table a, t_sod_data_logic b where a.class_logic_id = b.id and a.table_name=#{tableName} and b.database_id = #{databaseId}
    </select>

    <select id="getLogicClassTree" resultType="java.util.Map">
        SELECT LOGIC_NAME "name",CONCAT('0-',LOGIC_FLAG) "id",'0' "pId",'1' "type",'0' "metaDataId" FROM  T_SOD_LOGIC_DEFINE
            UNION
        SELECT DISTINCT CLASS_NAME "name", CONCAT(A.DATA_CLASS_ID, CONCAT('-', LOGIC_FLAG)) "id",CONCAT(PARENT_ID,  CONCAT('-', LOGIC_FLAG)) "pId", '1' "type", '0' "metaDataId"
        FROM T_SOD_DATA_CLASS A INNER JOIN T_SOD_DATA_LOGIC B ON  A.DATA_CLASS_ID =  SUBSTR(B.DATA_CLASS_ID,0,1)
            UNION
        SELECT D.CLASS_NAME "name", CONCAT(D.DATA_CLASS_ID, CONCAT('-', C.LOGIC_FLAG)) "id", CONCAT(D.PARENT_ID,  CONCAT('-', C.LOGIC_FLAG)) "pId",'1' "type",'0' "metaDataId"
        FROM (SELECT CLASS_NAME,A.DATA_CLASS_ID,LOGIC_FLAG,PARENT_ID FROM T_SOD_DATA_CLASS A
            INNER JOIN T_SOD_DATA_LOGIC B ON  A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,T_SOD_DATA_CLASS D where C.PARENT_ID = D.DATA_CLASS_ID
            UNION
        SELECT F.CLASS_NAME "name", CONCAT(F.DATA_CLASS_ID, CONCAT('-', E.LOGIC_FLAG)) "id", CONCAT(F.PARENT_ID,  CONCAT('-', E.LOGIC_FLAG)) "pId",'1' "type",'0' "metaDataId"  FROM
        (SELECT D.CLASS_NAME,D.DATA_CLASS_ID,D.PARENT_ID,C.LOGIC_FLAG FROM
        (SELECT CLASS_NAME,A.DATA_CLASS_ID,LOGIC_FLAG,PARENT_ID FROM T_SOD_DATA_CLASS A INNER JOIN T_SOD_DATA_LOGIC B  ON  A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,T_SOD_DATA_CLASS D
        where C.PARENT_ID = D.DATA_CLASS_ID) E,T_SOD_DATA_CLASS F  where E.PARENT_ID = F.DATA_CLASS_ID
            UNION
        SELECT CLASS_NAME "name",A.DATA_CLASS_ID "id",CONCAT(PARENT_ID,CONCAT('-',LOGIC_FLAG)) "pId",
        '2' "type",'0' "metaDataId" FROM T_SOD_DATA_CLASS A INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID WHERE TYPE = 2
    </select>

    <select id="getDatabaseTree" resultType="java.util.Map">
        SELECT * FROM (SELECT CONCAT(ID,'-P') ID,'999' PID,DATABASE_NAME NAME,'' DATA_CLASS_ID,1 TYPE,true isParent FROM
        T_SOD_DATABASE_DEFINE WHERE USER_DISPLAY_CONTROL = 1 ORDER BY ID) A
        UNION
        SELECT * FROM (SELECT ID ID,CONCAT(DATABASE_DEFINE_ID,'-P') PID,
        CONCAT(CONCAT(CONCAT(DATABASE_NAME,'('),SCHEMA_NAME),')') NAME,'' DATA_CLASS_ID,1 TYPE,true isParent FROM
        T_SOD_DATABASE WHERE STOP_USE = false AND DATABASE_DEFINE_ID IN
        (SELECT ID FROM T_SOD_DATABASE_DEFINE WHERE USER_DISPLAY_CONTROL = 1) ORDER BY ID) B
    </select>

    <select id="getDatabaseClassTree" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END id,CLASS_NAME name,
        CONCAT(CASE PARENT_ID WHEN 0 THEN '' ELSE PARENT_ID END, #{id}) pId,DATA_CLASS_ID,TYPE  type,
        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END isParent
        FROM T_SOD_DATA_CLASS START WITH DATA_CLASS_ID IN (SELECT DISTINCT DATA_CLASS_ID FROM T_SOD_DATA_LOGIC WHERE DATABASE_ID = #{id})
        CONNECT BY PRIOR PARENT_ID = DATA_CLASS_ID ORDER BY id
    </select>

    <select id="getDatabaseClassTreeMysql" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END ID,CLASS_NAME NAME,PARENT_ID,
        CONCAT(CASE PARENT_ID WHEN '0' THEN '' ELSE PARENT_ID END, #{id}) PID,DATA_CLASS_ID,TYPE  TYPE,
        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END isParent
        FROM T_SOD_DATA_CLASS WHERE DATA_CLASS_ID IN (SELECT DISTINCT DATA_CLASS_ID FROM T_SOD_DATA_LOGIC WHERE DATABASE_ID = #{id})
         ORDER BY id
    </select>

    <select id="getDatabaseClassTreePMysql" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END ID,CLASS_NAME NAME,PARENT_ID,
        CONCAT(CASE PARENT_ID WHEN '0' THEN '' ELSE PARENT_ID END, #{id}) PID,DATA_CLASS_ID,TYPE  TYPE,
        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END isParent
        FROM T_SOD_DATA_CLASS WHERE DATA_CLASS_ID IN
        <foreach collection="classIds" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
         ORDER BY id
    </select>
</mapper>