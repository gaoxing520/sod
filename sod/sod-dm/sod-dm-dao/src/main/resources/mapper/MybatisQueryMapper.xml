<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.piesat.dm.mapper.MybatisQueryMapper">

    <!--根据目录查询资料-->
    <select id="getDataClassListBYIn" resultType="java.util.Map">
        select DISTINCT
        A.DATA_CLASS_ID,A.CLASS_NAME,A.PARENT_ID,A.TYPE,A.D_DATA_ID,A.META_DATA_NAME,A.IS_ALL_LINE,A.USE_BASE_INFO
        ,E.table_name,A.REMARK TABLE_DESC
        from T_SOD_DATA_CLASS A
        left join T_SOD_DATACLASS_TABLE B on A.data_class_id = B.data_class_id
        left join T_SOD_DATA_TABLE_INFO E on B.table_Id = E.id
        WHERE
        A.TYPE = 2
        <if test="classIds!=null and classIds.size()>0">
            AND A.data_class_id in
            <foreach collection="classIds" index="index" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <if test="className != null and className != ''">
            AND class_name like CONCAT('%',#{className},'%')
        </if>
        <if test="dDataId != null and dDataId != ''">
            AND upper(A.d_data_id) like CONCAT('%',upper(#{dDataId}),'%')
        </if>
        <if test="dataclassId != null and dataclassId != ''">
            AND upper(A.DATA_CLASS_ID) like CONCAT('%',upper(#{dataclassId}),'%')
        </if>
        ORDER BY A.D_DATA_ID,A.DATA_CLASS_ID
    </select>
    <!--根据物理库查询dataLogic（MAP）-->
    <select id="getDataLogicByDatabaseId" parameterType="String" resultType="java.util.Map">
        SELECT C.*, B.D_DATA_ID, B.CLASS_NAME, B.META_DATA_NAME
        FROM T_SOD_DATACLASS_TABLE A
                 LEFT JOIN T_SOD_DATA_CLASS B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID
                 LEFT JOIN T_SOD_DATA_TABLE_INFO C ON A.TABLE_ID = C.ID
        WHERE C.DATABASE_ID = #{databaseId}
    </select>


    <!--修改存储结构概览状态-->
    <update id="updateStorageConfigurationStatus">
        update T_SOD_ADVANCED_CONFIG
        set ${column} = ${value}
        where id = #{id}
    </update>

    <select id="findStorageConfigurationByDataClassId" resultType="java.util.Map">
        select a.*, c.database_id, b.data_class_id
        from T_SOD_ADVANCED_CONFIG a,
             T_SOD_DATACLASS_TABLE b,
             T_SOD_DATA_TABLE_INFO c
        where a.table_id = b.table_id
          and b.table_id = c.id
          and b.data_class_id = #{dataClassId}
    </select>

    <delete id="deleteStorageConfigurationByDataClassId">
        delete
        from T_SOD_ADVANCED_CONFIG
        where table_id in (select table_id from T_SOD_DATACLASS_TABLE where data_class_id = #{dataClassId});
    </delete>

    <select id="getByDatabaseIdAndTableName" resultType="java.util.Map">
        select *
        from T_SOD_DATA_TABLE_INFO a
        where a.table_name = #{tableName}
          and a.database_id = #{databaseId}
    </select>


    <select id="getOnlineTime" resultType="java.util.Map">
        select min(BEGIN_TIME) as "BEGIN_TIME",
               max(END_TIME)   as "END_TIME"
        from T_SOD_TABLEDATA_STATISTICS a
                 left join T_SOD_DATA_TABLE_INFO b on a.TABLE_ID = b.id
                 left join T_SOD_DATABASE d on B.database_id = d.id
                 left join T_SOD_DATABASE_DEFINE dd on d.database_define_id = dd.id
        where c.DATA_CLASS_ID = #{classDataId}
          and a.statistic_date >= #{statisticDate}
          and dd.id in ('STDB', 'HADB', 'FIDB')
        order by a.statistic_date desc;
    </select>

    <select id="onLineTimeByClassId" resultType="java.util.Map">
        SELECT BEGIN_TIME, END_TIME, RECORD_COUNT, DATA_CLASS_ID, STATISTIC_TIME, DD.DATABASE_NAME
        FROM T_SOD_TABLEDATA_STATISTICS AA
                 INNER JOIN
             (SELECT DATA_CLASS_ID, B.database_id, A.TABLE_ID, MAX(STATISTIC_TIME) STATISTIC_TIME
              FROM T_SOD_TABLEDATA_STATISTICS A
                       LEFT JOIN T_SOD_DATA_TABLE_INFO B ON A.TABLE_ID = B.ID
                       LEFT JOIN T_SOD_DATACLASS_TABLE C ON B.ID = C.TABLE_ID
              WHERE C.DATA_CLASS_ID IS NOT NULL
                and C.DATA_CLASS_ID = #{dataClassId}
              GROUP BY C.DATA_CLASS_ID, B.DATABASE_ID, A.TABLE_ID
              order by C.DATA_CLASS_ID) BB
             on AA.DATABASE_ID = BB.DATABASE_ID and AA.STATISTIC_TIME = BB.STATISTIC_TIME and AA.TABLE_ID = BB.TABLE_ID
                 INNER JOIN T_SOD_DATABASE CC on AA.DATABASE_ID = CC.ID
                 INNER JOIN T_SOD_DATABASE_DEFINE DD on CC.DATABASE_DEFINE_ID = DD.ID
    </select>

    <select id="findAllOnlineInfo" resultType="java.util.Map">
        select a.*, b.DATABASE_ID, c.table_name
        from T_SOD_DATA_ONLINE_TIME a
                 left join T_SOD_DATA_LOGIC b on a.data_class_id = b.DATA_CLASS_ID
                 left join T_SOD_DATA_TABLE c on b.id = c.CLASS_LOGIC_ID;
    </select>

    <select id="getTableInfoByClassId" resultType="java.util.Map">
        select a.*
        from T_SOD_DATA_TABLE_INFO a
                 left join T_SOD_DATACLASS_TABLE b on (a.id = b.table_id or a.id = b.sub_table_id)
        where b.data_class_id = #{dataClassId}
    </select>

    <select id="getInfoByUserIdMysql" resultType="java.util.Map">
        select distinct b.data_class_id as "id", c.data_class_id as "pId", b.class_name as "name"
        from T_SOD_DATA_TABLE_INFO a
                 left join T_SOD_DATACLASS_TABLE d on a.id = d.table_id
                 left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
                 left join T_SOD_DATA_CLASS c on substr(b.data_class_id, 1, 1) = c.data_class_id and c.type = 1
        where id is not null
          and a.user_id = #{userId}
        union
        select distinct c.data_class_id as "id", c.parent_id as "pId", c.class_name as "name"
        from T_SOD_DATA_TABLE_INFO a
                 left join T_SOD_DATACLASS_TABLE d on a.id = d.table_id
                 left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
                 left join T_SOD_DATA_CLASS c on substr(b.data_class_id, 1, 1) = c.data_class_id and c.type = 1
        where id is not null
          and a.user_id = #{userId}
    </select>
    <select id="getInfoByUserId" resultType="java.util.Map">
        select distinct b.data_class_id as "id", c.data_class_id as "pId", b.class_name as "name"
        from T_SOD_DATA_TABLE_INFO a
                 left join T_SOD_DATACLASS_TABLE d on a.id = d.table_id
                 left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
                 left join T_SOD_DATA_CLASS c on substr(b.data_class_id, 0, 1) = c.data_class_id and c.type = 1
        where id is not null and a.user_id = #{userId}
           or b.create_by = #{userId}
        union
        select distinct c.data_class_id as "id", c.parent_id as "pId", c.class_name as "name"
        from T_SOD_DATA_TABLE_INFO a
                 left join T_SOD_DATACLASS_TABLE d on a.id = d.table_id
                 left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
                 left join T_SOD_DATA_CLASS c on substr(b.data_class_id, 0, 1) = c.data_class_id and c.type = 1
        where id is not null and a.user_id = #{userId}
           or b.create_by = #{userId}
    </select>
    <!--<select id="getInfoByUserId1" resultType="java.util.Map">
        select distinct b.data_class_id as "id",c.data_class_id as "pId",b.class_name as "name" from T_SOD_DATA_TABLE a
               left join T_SOD_DATA_LOGIC d on a.class_logic_id = d.id
               left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
               left join T_SOD_DATA_CLASS c on substr(b.data_class_id,0,1) = c.data_class_id and c.type = 1 where a.user_id=#{userId}

    </select>
    <select id="getInfoByUserId2" resultType="java.util.Map">
        select distinct c.data_class_id as "id",c.parent_id as "pId",c.class_name as "name" from T_SOD_DATA_TABLE a
                left join T_SOD_DATA_LOGIC d on a.class_logic_id = d.id
                left join T_SOD_DATA_CLASS b on d.data_class_id = b.data_class_id
                left join T_SOD_DATA_CLASS c on substr(b.data_class_id,0,1) = c.data_class_id and c.type = 1 where a.user_id=#{userId}
                order by id asc
    </select>-->


    <select id="getLogicByUserId" resultType="java.util.Map">
        select distinct a.* from T_SOD_LOGIC_DEFINE a, T_SOD_LOGIC_DATABASE b where a.id = b.logic_id
        and b.database_id in
        <foreach collection="databaseIds" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>


    <select id="getLogicClassTree" resultType="java.util.Map">
        SELECT LOGIC_NAME as NAME, CONCAT('0-', LOGIC_FLAG) ID, '0' PID, '1' as TYPE, '0' METADATAID
        FROM T_SOD_LOGIC_DEFINE
        UNION
        SELECT DISTINCT CLASS_NAME as                                    NAME,
                        CONCAT(A.DATA_CLASS_ID, CONCAT('-', LOGIC_FLAG)) ID,
                        CONCAT(PARENT_ID, CONCAT('-', LOGIC_FLAG))       PID,
                        '1'        as                                    TYPE,
                        '0'                                              METADATAID
        FROM T_SOD_DATA_CLASS A
                 INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = SUBSTR(B.DATA_CLASS_ID, 0, 1)
        UNION
        SELECT D.CLASS_NAME as                                    NAME,
               CONCAT(D.DATA_CLASS_ID, CONCAT('-', C.LOGIC_FLAG)) ID,
               CONCAT(D.PARENT_ID, CONCAT('-', C.LOGIC_FLAG))     PID,
               '1'          as                                    TYPE,
               '0'                                                METADATAID
        FROM (SELECT CLASS_NAME, A.DATA_CLASS_ID, LOGIC_FLAG, PARENT_ID
              FROM T_SOD_DATA_CLASS A
                       INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,
             T_SOD_DATA_CLASS D
        where C.PARENT_ID = D.DATA_CLASS_ID
        UNION
        SELECT F.CLASS_NAME as                                    NAME,
               CONCAT(F.DATA_CLASS_ID, CONCAT('-', E.LOGIC_FLAG)) ID,
               CONCAT(F.PARENT_ID, CONCAT('-', E.LOGIC_FLAG))     PID,
               '1'          as                                    TYPE,
               '0'                                                METADATAID
        FROM (SELECT D.CLASS_NAME, D.DATA_CLASS_ID, D.PARENT_ID, C.LOGIC_FLAG
              FROM (SELECT CLASS_NAME, A.DATA_CLASS_ID, LOGIC_FLAG, PARENT_ID
                    FROM T_SOD_DATA_CLASS A
                             INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,
                   T_SOD_DATA_CLASS D
              where C.PARENT_ID = D.DATA_CLASS_ID) E,
             T_SOD_DATA_CLASS F
        where E.PARENT_ID = F.DATA_CLASS_ID
        UNION
        SELECT CLASS_NAME as                              NAME,
               A.DATA_CLASS_ID                            ID,
               CONCAT(PARENT_ID, CONCAT('-', LOGIC_FLAG)) PID,
               '2'        as                              TYPE,
               '0'                                        METADATAID
        FROM T_SOD_DATA_CLASS A
                 INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID
        WHERE TYPE = 2
    </select>
    <select id="getLogicClassTreePostgresql" resultType="java.util.Map">
        SELECT LOGIC_NAME as NAME, CONCAT('0-', LOGIC_FLAG) ID, '0' PID, '1' as TYPE, '0' METADATAID
        FROM T_SOD_LOGIC_DEFINE
        UNION
        SELECT DISTINCT CLASS_NAME as                                    NAME,
                        CONCAT(A.DATA_CLASS_ID, CONCAT('-', LOGIC_FLAG)) ID,
                        CONCAT(PARENT_ID, CONCAT('-', LOGIC_FLAG))       PID,
                        '1'        as                                    TYPE,
                        '0'                                              METADATAID
        FROM T_SOD_DATA_CLASS A
                 INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = SUBSTR(B.DATA_CLASS_ID, 1, 1)
        UNION
        SELECT D.CLASS_NAME as                                    NAME,
               CONCAT(D.DATA_CLASS_ID, CONCAT('-', C.LOGIC_FLAG)) ID,
               CONCAT(D.PARENT_ID, CONCAT('-', C.LOGIC_FLAG))     PID,
               '1'          as                                    TYPE,
               '0'                                                METADATAID
        FROM (SELECT CLASS_NAME, A.DATA_CLASS_ID, LOGIC_FLAG, PARENT_ID
              FROM T_SOD_DATA_CLASS A
                       INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,
             T_SOD_DATA_CLASS D
        where C.PARENT_ID = D.DATA_CLASS_ID
        UNION
        SELECT F.CLASS_NAME as                                    NAME,
               CONCAT(F.DATA_CLASS_ID, CONCAT('-', E.LOGIC_FLAG)) ID,
               CONCAT(F.PARENT_ID, CONCAT('-', E.LOGIC_FLAG))     PID,
               '1'          as                                    TYPE,
               '0'                                                METADATAID
        FROM (SELECT D.CLASS_NAME, D.DATA_CLASS_ID, D.PARENT_ID, C.LOGIC_FLAG
              FROM (SELECT CLASS_NAME, A.DATA_CLASS_ID, LOGIC_FLAG, PARENT_ID
                    FROM T_SOD_DATA_CLASS A
                             INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID) C,
                   T_SOD_DATA_CLASS D
              where C.PARENT_ID = D.DATA_CLASS_ID) E,
             T_SOD_DATA_CLASS F
        where E.PARENT_ID = F.DATA_CLASS_ID
        UNION
        SELECT CLASS_NAME as                              NAME,
               A.DATA_CLASS_ID                            ID,
               CONCAT(PARENT_ID, CONCAT('-', LOGIC_FLAG)) PID,
               '2'        as                              TYPE,
               '0'                                        METADATAID
        FROM T_SOD_DATA_CLASS A
                 INNER JOIN T_SOD_DATA_LOGIC B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID
        WHERE TYPE = 2
    </select>

    <select id="getDatabaseTree" resultType="java.util.Map">
        SELECT *
        FROM (SELECT ID, '999' PID, DATABASE_NAME NAME, '' DATA_CLASS_ID, 1 TYPE, true isParent
              FROM T_SOD_DATABASE_DEFINE
              WHERE USER_DISPLAY_CONTROL = 1
              ORDER BY SERIAL_NUMBER) A
        UNION
        SELECT *
        FROM (SELECT ID                                                            ID,
                     DATABASE_DEFINE_ID                                            PID,
                     CONCAT(CONCAT(CONCAT(SCHEMA_NAME_CN, '('), SCHEMA_NAME), ')') NAME,
                     ''                                                            DATA_CLASS_ID,
                     1                                                             TYPE,
                     true                                                          isParent
              FROM T_SOD_DATABASE
              WHERE STOP_USE = false
                AND DATABASE_DEFINE_ID IN
                    (SELECT ID FROM T_SOD_DATABASE_DEFINE WHERE USER_DISPLAY_CONTROL = 1)
              ORDER BY ID) B
    </select>
    <select id="getDatabaseTreePostgresql" resultType="java.util.Map">
        SELECT *
        FROM (SELECT CONCAT(ID, '-P') ID, '999' PID, DATABASE_NAME as NAME, '' DATA_CLASS_ID, 1 as TYPE, true isParent
              FROM T_SOD_DATABASE_DEFINE
              WHERE USER_DISPLAY_CONTROL = 1
              ORDER BY ID) A
        UNION
        SELECT *
        FROM (SELECT ID                                                               ID,
                     CONCAT(DATABASE_DEFINE_ID, '-P')                                 PID,
                     CONCAT(CONCAT(CONCAT(SCHEMA_NAME_CN, '('), SCHEMA_NAME), ')') as NAME,
                     ''                                                               DATA_CLASS_ID,
                     1                                                             as TYPE,
                     true                                                             isParent
              FROM T_SOD_DATABASE
              WHERE STOP_USE = false
                AND DATABASE_DEFINE_ID IN
                    (SELECT ID FROM T_SOD_DATABASE_DEFINE WHERE USER_DISPLAY_CONTROL = 1)
              ORDER BY ID) B
    </select>

    <select id="getDatabaseClassTree" resultType="java.util.Map" parameterType="String">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END id,
                        CLASS_NAME                                                                name,
                        CONCAT(CASE PARENT_ID WHEN 0 THEN '' ELSE PARENT_ID END, #{id})           pId,
                        DATA_CLASS_ID,
                        TYPE                                                                      type,
                        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END                                 isParent
        FROM T_SOD_DATA_CLASS START WITH DATA_CLASS_ID IN
        (SELECT DISTINCT DATA_CLASS_ID FROM T_SOD_DATACLASS_TABLE A,T_SOD_DATA_TABLE_INFO B WHERE A.TABLE_ID = B.ID AND B.DATABASE_ID = #{id})
        CONNECT BY PRIOR PARENT_ID = DATA_CLASS_ID
        ORDER BY id
    </select>

    <select id="getDatabaseClassTreeMysql" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END ID,
                        CLASS_NAME                                                                NAME,
                        PARENT_ID,
                        CONCAT(CASE PARENT_ID WHEN '0' THEN '' ELSE PARENT_ID END, #{id})         PID,
                        DATA_CLASS_ID,
                        TYPE                                                                      TYPE,
                        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END                                 isParent
        FROM T_SOD_DATA_CLASS
        WHERE DATA_CLASS_ID IN
              (SELECT DISTINCT DATA_CLASS_ID
               FROM T_SOD_DATACLASS_TABLE A,
                    T_SOD_DATA_TABLE_INFO B
               WHERE A.TABLE_ID = B.ID
                 AND B.DATABASE_ID = #{id})
        ORDER BY id
    </select>
    <select id="getDatabaseClassTreePostgresql" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END ID,
                        CLASS_NAME as                                                             NAME,
                        PARENT_ID,
                        CONCAT(CASE PARENT_ID WHEN '0' THEN '' ELSE PARENT_ID END, #{id})         PID,
                        DATA_CLASS_ID,
                        TYPE       as                                                             TYPE,
                        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END                                 isParent
        FROM T_SOD_DATA_CLASS
        WHERE DATA_CLASS_ID IN
              (SELECT DISTINCT DATA_CLASS_ID
               FROM T_SOD_DATACLASS_TABLE A,
                    T_SOD_DATA_TABLE_INFO B
               WHERE A.TABLE_ID = B.ID
                 AND B.DATABASE_ID = #{id})
        ORDER BY id
    </select>
    <select id="getDatabaseClassTreePMysql" resultType="java.util.Map">
        SELECT DISTINCT CASE TYPE WHEN 2 THEN DATA_CLASS_ID ELSE CONCAT(DATA_CLASS_ID, #{id}) END ID,CLASS_NAME
        NAME,PARENT_ID,
        CONCAT(CASE PARENT_ID WHEN '0' THEN '' ELSE PARENT_ID END, #{id}) PID,DATA_CLASS_ID,TYPE TYPE,
        CASE TYPE WHEN 1 THEN TRUE ELSE FALSE END isParent
        FROM T_SOD_DATA_CLASS WHERE DATA_CLASS_ID IN
        <foreach collection="classIds" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY id
    </select>


    <update id="updateNewdataApplyStatus">
        update t_sod_newdata_apply
        <set>
            <if test="entity.memo != null and entity.memo  != ''">
                memo = #{entity.memo},
            </if>
            <if test="entity.examiner != null and entity.examiner  != ''">
                examiner = #{entity.examiner},
            </if>
            <if test="entity.examineTime != null">
                examine_time = #{entity.examineTime},
            </if>
            <if test="entity.isPublish != null and entity.isPublish  != ''">
                is_publish = #{entity.isPublish},
            </if>
            <if test="entity.remark != null and entity.remark  != ''">
                remark = #{entity.remark},
            </if>
            <if test="entity.examineStatus != null and entity.examineStatus  != ''">
                examine_status = #{entity.examineStatus},
            </if>
        </set>
        where id = #{entity.id}
    </update>
    <select id="getByUserIdAndApplyId" resultType="java.util.Map">
        select a.*,d.id physicId,e.class_name dataName,
        c.SCHEMA_NAME_CN || '【' || c.schema_name || '】' as schemaName,d.database_name || '【' || d.id || '】' as
        physicName
        from T_SOD_NEWDATA_APPLY a
        left join T_SOD_DATABASE c on a.database_id = c.id
        left join T_SOD_DATABASE_DEFINE d on c.database_define_id = d.id
        left join T_SOD_DATA_CLASS e on a.data_class_id = e.data_class_id
        <where>
            <if test="entity.userId != null and entity.userId  != ''">
                a.user_id = #{entity.userId}
            </if>
            <if test="entity.id != null and entity.id  != ''">
                and a.id = #{entity.id}
            </if>
            <if test="entity.dDataId != null and entity.dDataId  != ''">
                and a.d_data_id = #{entity.dDataId}
            </if>
            <if test="entity.dataOrigin != null and entity.dataOrigin  != ''">
                and a.data_origin = #{entity.dataOrigin}
            </if>
            <if test="entity.examineStatus != null and entity.examineStatus  != ''">
                and a.examine_status = #{entity.examineStatus}
            </if>
        </where>
    </select>
    <select id="getColumnByIdAndDDataId" resultType="java.util.Map">
        select distinct c_element_code,ele_name,type,unit,user_ele_code,is_null,accuracy,is_primary_key,serial_number
        from T_SOD_DATA_TABLE_COLUMN where table_id in
        ( select t.id
        from T_SOD_NEWDATA_APPLY a
        left join T_SOD_DATACLASS_TABLE c on a.data_class_id = c.data_class_id
        left join T_SOD_DATA_TABLE_INFO t on (c.table_id = t.id or c.sub_table_id = t.id)
        <where>
            <if test="entity.id != null and entity.id  != ''">
                a.id = #{entity.id}
            </if>
            <if test="entity.dDataId != null and entity.dDataId  != ''">
                and a.d_data_id = #{entity.dDataId}
            </if>
        </where>
        ) order by serial_number asc
    </select>

    <select id="queryNewdataApplyByApplyId" parameterType="String" resultType="java.util.Map">
        select a.*, b.c_datum_code, b.c_datumtype, c.c_datum_code type_code, c.c_datumtype type_name
        FROM t_sod_newdata_apply a
                 left join TAB_OMIN_CM_CC_DATUMTYPEINFO b on a.d_data_id = b.c_datum_code
                 left join TAB_OMIN_CM_CC_DATUMTYPEINFO c on SUBSTR(a.D_DATA_ID, 1, 1) = c.c_datum_code
        WHERE a.id = #{id}
    </select>

    <select id="queryDataAuthorityApplyById" resultType="java.util.Map" parameterType="String">
        select a.*, b.database_up_id, b.database_up_password, b.examine_status
        from T_SOD_DATA_AUTHORITY_APPLY_FLOW a
                 left join t_sod_database_user b on a.user_id = b.user_id and b.examine_status = '1'
        where a.id = #{id}
    </select>


    <select id="getRecordByApplyIdMysql" resultType="java.util.Map" parameterType="java.util.Map">
        select distinct
        d.*,dd.class_name,dd.is_access,dd.type_id,dd.type_name,dd.table_name,dd.special_database_name,dd.database_name
        from T_SOD_DATA_AUTHORITY_APPLY d left join
        (select a.data_class_id,a.class_name,a.is_access,f.data_class_id type_id,f.class_name type_name,b.id
        class_logic_id,c.database_id,c.table_name,e.SCHEMA_NAME_CN special_database_name,ee.database_name, c.id table_id
        from T_SOD_DATA_CLASS a
        left join T_SOD_DATA_CLASS f on SUBSTR(a.data_class_id,1,1) = f.data_class_id
        left join T_SOD_DATACLASS_TABLE b on a.data_class_id = b.data_class_id
        left join T_SOD_DATA_TABLE_INFO c on (c.id = b.table_id or c.id = b.sub_table_id)
        left join T_SOD_DATABASE e on c.database_id = e.id
        left join T_SOD_DATABASE_DEFINE ee on e.database_define_id = ee.id ) dd
        on d.table_id = dd.table_id
        <where>
            <if test="map.applyId != null and map.applyId  != ''">
                d.apply_id = #{map.applyId}
            </if>
            <if test="map.typeName != null and map.typeName  != ''">
                AND type_name like '%${map.typeName}%'
            </if>
            <if test="map.className != null and map.className  != ''">
                AND class_name like '%${map.className}%'
            </if>
            <if test="map.tableName != null and map.tableName  != ''">
                AND table_name like '%${map.tableName}%'
            </if>
            <if test="map.databaseName != null and map.databaseName  != ''">
                AND database_name like '%${map.databaseName}%'
            </if>
            <if test="map.specialDatabaseName != null and map.specialDatabaseName  != ''">
                AND special_database_name like '%${map.specialDatabaseName}%'
            </if>
            <if test="map.applyAuthority != null and map.applyAuthority  != ''">
                AND apply_authority = #{map.applyAuthority}
            </if>
            <if test="map.authorize != null and map.authorize  != ''">
                AND authorize = #{map.authorize}
            </if>
        </where>
    </select>

    <select id="getRecordByApplyId" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT DISTINCT
        D.*,DD.CLASS_NAME, DD.D_DATA_ID,DD.STORAGE_TYPE,
        DD.DATA_CLASS_ID,DD.IS_ACCESS,DD.TYPE_ID,DD.TYPE_NAME,DD.TABLE_NAME,DD.DATABASE_ID,DD.SPECIAL_DATABASE_NAME,DD.DATABASE_NAME
        FROM T_SOD_DATA_AUTHORITY_APPLY D LEFT JOIN
        (SELECT A.DATA_CLASS_ID, A.D_DATA_ID,A.CLASS_NAME,A.IS_ACCESS,F.DATA_CLASS_ID TYPE_ID,F.CLASS_NAME
        TYPE_NAME,C.DATABASE_ID,B.ID CLASS_LOGIC_ID,C.TABLE_NAME,E.SCHEMA_NAME_CN
        SPECIAL_DATABASE_NAME,EE.DATABASE_NAME, C.ID TABLE_ID, C.STORAGE_TYPE
        FROM T_SOD_DATA_CLASS A
        LEFT JOIN T_SOD_DATA_CLASS F ON SUBSTR(A.DATA_CLASS_ID,0,1) = F.DATA_CLASS_ID
        LEFT JOIN T_SOD_DATACLASS_TABLE B ON A.DATA_CLASS_ID = B.DATA_CLASS_ID
        LEFT JOIN T_SOD_DATA_TABLE_INFO C ON (C.ID = B.TABLE_ID OR C.ID = B.SUB_TABLE_ID)
        LEFT JOIN T_SOD_DATABASE E ON C.DATABASE_ID = E.ID
        LEFT JOIN T_SOD_DATABASE_DEFINE EE ON E.DATABASE_DEFINE_ID = EE.ID ) DD
        ON D.TABLE_ID = DD.TABLE_ID
        <where>
            <if test="map.applyId != null and map.applyId  != ''">
                D.APPLY_ID = #{map.applyId}
            </if>
            <if test="map.typeName != null and map.typeName  != ''">
                AND TYPE_NAME like '%${map.typeName}%'
            </if>
            <if test="map.className != null and map.className  != ''">
                AND CLASS_NAME like '%${map.className}%'
            </if>
            <if test="map.tableName != null and map.tableName  != ''">
                AND TABLE_NAME like '%${map.tableName}%'
            </if>
            <if test="map.databaseName != null and map.databaseName  != ''">
                AND DATABASE_NAME like '%${map.databaseName}%'
            </if>
            <if test="map.specialDatabaseName != null and map.specialDatabaseName  != ''">
                AND SPECIAL_DATABASE_NAME like '%${map.specialDatabaseName}%'
            </if>
            <if test="map.applyAuthority != null and map.applyAuthority  != ''">
                AND APPLY_AUTHORITY = #{map.applyAuthority}
            </if>
            <if test="map.authorize != null and map.authorize  != ''">
                AND AUTHORIZE = #{map.authorize}
            </if>
        </where>
    </select>
    <update id="updateDataAuthorityRecord">
        update T_SOD_DATA_AUTHORITY_APPLY
        <set>
            <if test="authorize != null">
                authorize = #{authorize},
            </if>
            <if test="cause != null  and cause  != ''">
                cause = #{cause}
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateDataAuthorityApply">
        update T_SOD_DATA_AUTHORITY_APPLY_FLOW
        <set>
            <if test="auditStatus != null and auditStatus  != ''">
                audit_status = #{auditStatus},
            </if>
            <if test="examiner != null and examiner  != ''">
                examiner = #{examiner},
            </if>
            <if test="examineTime != null">
                examine_time = #{examineTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getDataServiceMaxNum" resultType="Integer" parameterType="String">
        select nvl(max(num), 0)
        from T_SOD_DATASERVICE_CONFIG
        where data_service_id = #{data_service_id}
          and num is not null
    </select>

    <select id="querySpecialReadWriteBySdbId" resultType="java.util.Map" parameterType="String">
        select distinct a.class_name NAME, a.data_class_id ID, b.type_id PID
        from T_SOD_DATA_CLASS a,
             T_SOD_DATABASE_SPECIAL_READ_WRITE b
        where a.data_class_id = b.data_class_id
          and b.sdb_id = #{sdbId}
          and b.examine_status = 1
    </select>

    <update id="updateSpecialTreeData">
        update t_sod_database_special_tree
        set type_name=#{typeName}
        <where>
            <if test="sdbId != null and sdbId  != ''">
                and sdb_id = #{sdbId}
            </if>
            <if test="typeId != null  and typeId  != ''">
                and type_id = #{typeId}
            </if>
            <if test="parentId != null  and parentId  != ''">
                and parent_id = #{parentId}
            </if>
        </where>
    </update>

    <select id="getRecordSpecialByTdbId" resultType="java.util.Map">
        select b.data_class_id,
               b.database_id,
               b.apply_authority,
               b.empower_authority,
               b.examine_status,
               b.failure_reason,
               e.class_name        data_service_name,
               d.table_name,
               e.class_name,
               c.SCHEMA_NAME_CN    database_name,
               cc.database_name as special_database_name,
               e.is_access,
               e.d_data_id
        from T_SOD_DATABASE_SPECIAL_READ_WRITE b,
             T_SOD_DATABASE c,
             T_SOD_DATABASE_DEFINE cc,
             T_SOD_DATA_TABLE_INFO d,
             T_SOD_DATACLASS_TABLE f,
             T_SOD_DATA_CLASS e
        where b.data_class_id = f.data_class_id
          and b.database_id = d.database_id
          and (f.table_id = d.id or f.sub_table_id = d.id)
          and b.database_id = c.id
          and c.database_define_id = cc.id
          and b.data_class_id = e.data_class_id
          and b.sdb_id = #{sdbId}
          and d.id not in (select dar.table_id
                           from T_SOD_DATA_AUTHORITY_APPLY_FLOW daa
                                    left join T_SOD_DATA_AUTHORITY_APPLY dar
                                              on daa.id = dar.apply_id and daa.user_id = #{user_id})
    </select>

    <!--根据用户ID从创建申请表取得其他用户创建并且没有被该用户引用的所有专题库信息-->
    <select id="getAllOtherRecordByUserId" resultType="java.util.Map">
        select * from T_SOD_DATABASE_SPECIAL
        <where>
            <if test="userId != null and userId != ''">
                user_id != #{userId} and id not in (select sdb_id from T_SOD_DATABASE_SPECIAL_ACCESS where user_id =
                #{userId})
            </if>
            <if test="useStatus != null and useStatus != ''">
                and use_status in(#{useStatus})
            </if>
        </where>
        order by create_time desc
    </select>


    <select id="getRecordListByUserIdMysql" resultType="java.util.Map" parameterType="String">
        select dd.id,
               dd.apply_id,
               dt.database_id,
               dd.authorize,
               dd.apply_authority,
               dd.cause,
               dt.name_cn,
               dt.table_name,
               da.user_id,
               da.create_time     as "apply_time",
               sdb.SCHEMA_NAME_CN as "special_name",
               sdb.schema_name    as "schema_name",
               sdd.database_name  as "database_name",
               sdd.id             as "database_define_id",
               sdc.class_name,
               tsu.web_username      user_name
        from T_SOD_DATA_AUTHORITY_APPLY dd
                 left join T_SOD_DATA_TABLE_INFO dt
                           on dt.id = dd.table_id and dt.database_id = dd.database_id
                 left join T_SOD_DATA_AUTHORITY_APPLY_FLOW da on dd.apply_id = da.id
                 left join t_sod_database sdb on dd.database_id = sdb.id
                 left join t_sod_database_define sdd on sdb.database_define_id = sdd.id
                 left join t_sod_data_class sdc on substr(dd.data_class_id, 1, 1) = sdc.data_class_id
                 left join t_sod_user tsu on tsu.user_name = dt.user_id
        where dt.user_id = #{userId}
        order by da.create_time desc, dd.authorize asc
    </select>
    <select id="getRecordListByUserId" resultType="java.util.Map" parameterType="String">
        select dd.id,
               dd.apply_id,
               dt.database_id,
               dd.authorize,
               dd.apply_authority,
               dd.cause,
               dt.name_cn,
               dt.table_name,
               da.user_id,
               da.create_time  as "apply_time",
               sdd.database_name  database_name,
               sdd.id          as "database_define_id",
               sdb.schema_name as "schema_name",
               sdb.SCHEMA_NAME_CN special_name,
               sdc.class_name,
               tsu.web_username   web_username,
               tsu.user_name      biz_userid
        from T_SOD_DATA_AUTHORITY_APPLY dd
                 left join T_SOD_DATA_TABLE_INFO dt
                           on dt.id = dd.table_id and dt.database_id = dd.database_id
                 left join T_SOD_DATA_AUTHORITY_APPLY_FLOW da on dd.apply_id = da.id
                 left join t_sod_database sdb on dd.database_id = sdb.id
                 left join t_sod_database_define sdd on sdb.database_define_id = sdd.id
                 left join t_sod_data_class sdc on substr(dd.data_class_id, 1, 1) = sdc.data_class_id
                 left join t_sod_user tsu on tsu.user_name = dt.user_id
        where dt.user_id = #{userId}
        order by da.create_time desc,
                 dd.authorize asc
    </select>

    <select id="getApplyRecordListByUserId" resultType="java.util.Map" parameterType="String">
        select dd.id,
               dd.apply_id,
               dt.database_id,
               dd.authorize,
               dd.apply_authority,
               dd.cause,
               dt.name_cn,
               dt.table_name,
               da.user_id,
               da.create_time        as "apply_time",
               sdb.schema_name       as "schema_name",
               sdb.DATABASE_CLASSIFY as "schema_id",
               sdd.DATABASE_NAME        database_name,
               sdd.id                as "database_define_id",
               sdc.class_name,
               tsu.web_username         user_name
        from T_SOD_DATA_AUTHORITY_APPLY dd
                 left join T_SOD_DATA_TABLE_INFO dt on dt.id = dd.table_id
                 left join T_SOD_DATACLASS_TABLE dlt on dlt.TABLE_ID = dd.table_id
                 left join T_SOD_DATA_AUTHORITY_APPLY_FLOW da on dd.apply_id = da.id
                 left join t_sod_database sdb on dt.database_id = sdb.id
                 left join t_sod_database_define sdd on sdb.database_define_id = sdd.id
                 left join t_sod_data_class sdc on substr(dlt.data_class_id, 1, 1) = sdc.data_class_id
                 left join t_sod_user tsu on tsu.user_name = dt.user_id
        where da.user_id = #{userId}
        order by da.create_time desc,
                 dd.authorize asc
    </select>

    <select id="getDataClassBaseInfo" resultType="DataClassBaseInfoEntity" parameterType="String">
        select aa.DATA_CLASS_ID dataClassId,b.C_IDABS cIdabs,b.C_MAINFREQ cMainfreq,b.c_coremeta_id cCoremetaId,
        b.C_DATASCAL cDatascal,c.C_WESTBL cWestbl,c.C_EASTBL cEastbl,c.C_SOUTHBL cSouthbl,e.C_OBSFREQ cObsfreq,
        c.C_NORTHBL cNorthbl,c.C_GEODESC cGeodesc,h.C_RPORGNAME cRporgname,
        b.C_SOURCE cSource,d.C_NETNAME cNetname,a.C_NETTYPE cNettype,
        f.C_CREAT_NAME cCreatName,f.C_CHECKER cChecker,
        g.C_RPINDNAME cRpindname,m.C_DOCINDNNAME cDocindnname,aa.use_base_info useBaseInfo from
        T_SOD_DATA_CLASS aa
        left join
        (select * from TAB_OMIN_CM_CC_DATUMTYPEINFO aa where (aa.C_OPT_TYPE is null or aa.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) a on aa.D_DATA_ID = a.c_datum_code
        left join
        (select * from tab_omin_cm_cc_coremeta bb where (bb.C_OPT_TYPE is null or bb.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) b on a.C_COREMETA_ID = b.C_COREMETA_ID
        left join
        (select * from tab_omin_cm_cc_geoele cc where (cc.C_OPT_TYPE is null or cc.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) c on c.C_COREMETA_ID = b.C_COREMETA_ID
        left join
        (select * from tab_omin_cm_cc_stationnet dd where (dd.C_OPT_TYPE is null or dd.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) d on a.C_NETTYPE = d.C_SNET_ID
        left join
        (select * from tab_omin_cm_cc_tempele ee where (ee.C_OPT_TYPE is null or ee.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) e on c.C_COREMETA_ID = e.C_COREMETA_ID
        left join
        (select * from tab_omin_cm_cc_dddidpocinfo gg where (gg.C_OPT_TYPE is null or gg.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) g on c.C_COREMETA_ID = g.C_COREMETA_ID
        left join
        (select * from TAB_OMIN_CM_CC_IDPOC hh where (hh.C_OPT_TYPE is null or hh.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) h on c.C_COREMETA_ID = h.C_COREMETA_ID
        left join
        (select * from TAB_OMIN_CM_CC_DDDDOCAUTHINFO mm where (mm.C_OPT_TYPE is null or mm.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')) m on c.C_COREMETA_ID = m.C_COREMETA_ID
        left join
        (select * from tab_omin_cm_cc_apply a where C_UPDATED_DATE = (select max(C_UPDATED_DATE) from
        tab_omin_cm_cc_apply b where a.C_DATA_ID = b.C_DATA_ID ))
        f on b.C_COREMETA_ID = f.C_DATA_ID

        <where>
            aa.data_class_id = #{id}
        </where>
        limit 1
    </select>


    <select id="queryCmccElements" resultType="CmccElementEntity" parameterType="DatumTableEntity">
        select
        c_element_code,cci_root_type_code,c_class_no,c_element_namech,c_element_name,c_short_name,c_define,
        c_subject_type,c_paramter_type,c_paramter_num,c_datatype,c_element_unit,c_element_pre,c_charactervalue,
        c_status,c_version,c_notes,c_codetable,c_submit_org_name,c_create_date,c_updated_date,c_modifier
        from tab_omin_cm_cc_element
        <where>
            c_element_code in (select c_element_code from tab_omin_cm_cc_datumtypeelm where c_datum_code =
            #{c_datum_code})
            <if test="c_datatype != null and c_datatype != ''">
                and upper(c_element_code) like '%${c_datatype}%'
            </if>
            <if test="c_datum_level != null and c_datum_level != ''">
                and c_element_namech like '%${c_datum_level}%'
            </if>
            <if test="c_datumtype != null and c_datumtype != ''">
                and (c_short_name) like '%${c_datumtype}%'
            </if>
        </where>
    </select>


    <select id="getLogicByDdataId" resultType="java.util.Map" parameterType="String">
        SELECT a.d_data_id, b.data_class_id, c.logic_flag, c.logic_name, b.id
        FROM t_sod_data_class a
                 INNER JOIN t_sod_data_logic b ON a.data_class_id = b.data_class_id
                 INNER JOIN t_sod_logic_define c ON c.logic_flag = b.logic_flag
        WHERE a.d_data_id = #{dDataId}
    </select>

    <select id="getDataLogic" resultType="DataTableInfoEntity" parameterType="String">
        SELECT b.id,b.storage_type storageType,b.database_id
        databaseId,a.version,a.create_time
        FROM T_SOD_DATACLASS_TABLE a INNER JOIN T_SOD_DATA_TABLE_INFO b ON a.table_id = b.id
        <where>
            1=1
            <if test="dataclassId != null and dataclassId != ''">
                and a.data_class_id = #{dataclassId}
            </if>
            <if test="databaseId != null and databaseId != ''">
                and b.database_id = #{databaseId}
            </if>
            <if test="tableName != null and tableName != ''">
                and b.table_name = #{tableName}
            </if>
        </where>

    </select>

    <select id="getDataTypeList" parameterType="String" resultType="java.util.Map">
        select *
        from t_sod_data_class
        where data_class_id in
              (select distinct leftb(data_class_id, 1) from t_sod_data_class where data_class_id in (${dataClassIds}))
    </select>

    <select id="getDataTypeListPostgresql" parameterType="String" resultType="java.util.Map">
        select *
        from t_sod_data_class
        where data_class_id in
              (select distinct SUBSTR(data_class_id, 1, 1)
               from t_sod_data_class
               where data_class_id in (${dataClassIds}))
    </select>

    <select id="findByDataServiceId" resultType="java.util.Map" parameterType="String">
        select a.*
        from T_SOD_DATA_TABLE_INFO a,
             T_SOD_DATACLASS_TABLE b
        where b.data_class_id in (${dataClassIds})
          and (a.id = b.table_id or a.id = b.sub_table_id)
          AND a.database_id = #{databaseId}
    </select>

    <select id="findColumnByTableId" resultType="java.util.Map" parameterType="String">
        select *
        from t_sod_data_table_column
        where table_id in (${tableId})
        order by serial_number asc
    </select>

    <select id="findIndexByTableId" resultType="java.util.Map" parameterType="String">
        select *
        from t_sod_data_table_index
        where table_id in (${tableId})
    </select>

    <select id="findShardByTableId" resultType="java.util.Map" parameterType="String">
        select *
        from t_sod_data_table_sharding
        where table_id in (${tableId})
    </select>

    <select id="findByDatabaseDefine" resultType="java.util.Map" parameterType="String">
        SELECT *
        FROM t_sod_database_define
        WHERE id =
              (SELECT database_define_id FROM t_sod_database WHERE id = #{databaseId})
    </select>

    <select id="findByUserIdAndDatabaseDefineId1" resultType="java.util.Map" parameterType="String">
        select a.id                                            as "id",
               a.SCHEMA_NAME_CN || '【' || a.schema_name || '】' as "name",
               a.database_define_id                            as "physicId"
        from t_sod_database a
        where a.database_classify = '物理库'
          and a.database_define_id = #{databaseDefineId}
    </select>
    <select id="findByUserIdAndDatabaseDefineId2" resultType="java.util.Map" parameterType="String">
        select a.id                                            as "id",
               a.SCHEMA_NAME_CN || '【' || a.schema_name || '】' as "name",
               a.database_define_id                            as "physicId"
        from t_sod_database a
                 left join t_sod_database_special b on a.tdb_id = b.id
        where a.database_classify = '专题库'
          and b.EXAMINE_STATUS = '2'
          and b.USE_STATUS = '2'
          and a.database_define_id = #{databaseDefineId}
          and b.user_id = #{userId}
    </select>

    <select id="getSqlList" resultType="java.util.Map" parameterType="String">
        SELECT M.id, M.data_service_id, M.data_service_name, M.table_name, N.table_sql
        FROM (SELECT DISTINCT a.id,
                              c.data_class_id data_service_id,
                              c.class_name    data_service_name,
                              a.table_name,
                              a.database_id
              FROM T_SOD_DATA_TABLE_INFO a,
                   T_SOD_DATACLASS_TABLE b,
                   T_SOD_DATA_CLASS c
              WHERE (a.ID = b.table_id or a.ID = b.sub_table_id)
                AND b.data_class_id = c.data_class_id
                AND a.data_service_id in (${dataClassIds})
                AND b.database_id = #{databaseId}
             ) M
                 LEFT JOIN t_sod_data_table_sql N
                           ON M.database_id = N.database_id
                               AND M.table_name = N.table_name
    </select>

    <select id="queryTableBylogics" resultType="java.util.Map" parameterType="java.util.List">
        select
        d.table_name,c.data_class_id,t2.class_name as "dataName",
        t2.d_data_id,d.table_type,wm_concat(d.storage_type) storage_type,
        t.data_class_id pid,t.class_name as "className",t.d_data_id pd_data_id,
        db.SCHEMA_NAME_CN as special_database_name,db.id database_id,db.database_define_id,db.schema_name
        database_schema_name
        FROM
        T_SOD_DATA_TABLE_INFO d
        inner join T_SOD_DATACLASS_TABLE c on d.id = c.table_id or d.id = c.sub_table_id
        inner join t_sod_data_class t on substr(c.data_class_id,0,1)=t.data_class_id
        inner join t_sod_data_class t2 on c.data_class_id = t2.data_class_id and t2.if_stop_use !='false'
        inner join t_sod_database db on db.id = d.database_id
        where db.database_define_id in
        <foreach collection="list" item="e" separator="," open="(" close=")">
            #{e}
        </foreach>
        group by
        d.table_name,c.data_class_id,t2.class_name,
        t2.d_data_id,d.table_type,
        t.data_class_id,t.class_name,t.d_data_id,
        db.SCHEMA_NAME_CN,db.id,db.database_define_id,db.schema_name
        ORDER BY DATA_CLASS_ID
    </select>
    <select id="getGroupConcat" resultType="java.util.Map" parameterType="java.util.List">
        select A.DATA_CLASS_ID,A.D_DATA_ID,A.DATA_SERVICE_NAME,WM_CONCAT(A.parent_id) logic,A.DATABASE_ID FROM(
        select DISTINCT n.DATA_CLASS_ID,t.D_DATA_ID,t.class_name DATA_SERVICE_NAME,dpd.database_define_id as
        parent_id,dpd.id as
        DATABASE_ID
        FROM T_SOD_DATA_TABLE_INFO m
        inner join T_SOD_DATACLASS_TABLE n on m.id = n.table_id or m.id = n.sub_table_id
        inner join t_sod_database dpd on m.database_id = dpd.id and dpd.database_classify='专题库'
        inner join t_sod_data_class t on n.data_class_id = t.data_class_id
        WHERE dpd.database_define_id in
        <foreach collection="list" item="e" separator="," open="(" close=")">
            #{e}
        </foreach>
        ) A
        group by
        A.DATA_CLASS_ID,A.D_DATA_ID,A.DATA_SERVICE_NAME,A.DATABASE_ID
        ORDER BY DATA_CLASS_ID
    </select>
    <select id="getRecordByTdbId" parameterType="String" resultType="java.util.Map">
        select
        b.DATA_CLASS_ID,e.class_name DATA_SERVICE_NAME,ee.D_DATA_ID,
        b.APPLY_AUTHORITY,b.EMPOWER_AUTHORITY,
        b.examine_status,b.failure_reason,c1.DATABASE_NAME,c.SCHEMA_NAME_CN SPECIAL_DATABASE_NAME,
        d.TABLE_NAME,e.CLASS_NAME,b.DATABASE_ID
        from T_SOD_DATABASE_SPECIAL_READ_WRITE b
        inner join T_SOD_DATACLASS_TABLE f on b.data_class_id = f.data_class_id
        inner join T_SOD_DATA_TABLE_INFO d on (d.id = f.table_id or d.id = f.sub_table_id) and d.database_id =
        b.DATABASE_ID
        inner join t_sod_database c on b.database_id = c.id
        inner join t_sod_database_define c1 on c.database_define_id = c1.id
        inner join t_sod_data_class e on substr(b.DATA_CLASS_ID,0,1)=e.DATA_CLASS_ID
        inner join t_sod_data_class ee on b.DATA_CLASS_ID =ee.DATA_CLASS_ID
        where b.SDB_ID='${tdbId}'
        <if test="status!=null and status !=''">
            AND b.examine_status=${status}
        </if>
        <if test="typeId!=null and typeId !=''">
            AND b.TYPE_ID=${typeId}
        </if>
    </select>
    <!-- 根据专题库ID查询关联资料，及资料相关四级编码，表名称，权限，物理库名称等 -->
    <select id="getAuthorizeRecordByTdbId" parameterType="String" resultType="java.util.Map">
        SELECT
        M.CLASS_NAME,M.DATA_CLASS_ID,M.DATA_SERVICE_NAME,M.D_DATA_ID,M.TABLE_NAME,WM_CONCAT(M.APPLY_AUTHORITY)
        APPLY_AUTHORITY,
        WM_CONCAT(M.empower_authority) REAL_AUTHORITY,WM_CONCAT(M.DATABASE_NAME)
        DATABASE_NAME,M.DATA_TYPE,M.SPECIAL_DATABASE_NAME,M.SPECIAL_DATABASE_ID
        FROM(
        SELECT DISTINCT f.DATA_CLASS_ID,e.class_name DATA_SERVICE_NAME,ee.D_DATA_ID,
        b.APPLY_AUTHORITY,b.empower_authority,c1.DATABASE_NAME,c.SCHEMA_NAME_CN
        SPECIAL_DATABASE_NAME,c.ID SPECIAL_DATABASE_ID,d.TABLE_NAME,e.CLASS_NAME,b.DATA_TYPE
        from T_SOD_DATABASE_SPECIAL_READ_WRITE b
        inner join T_SOD_DATACLASS_TABLE f on b.data_class_id = f.data_class_id
        inner join T_SOD_DATA_TABLE_INFO d on (d.id = f.table_id or d.id = f.sub_table_id ) and b.database_id =
        d.database_id
        inner join t_sod_database c on b.database_id = c.id
        inner join t_sod_database_define c1 on c.database_define_id = c1.id
        inner join t_sod_data_class e on substr(b.DATA_CLASS_ID,0,1)=e.DATA_CLASS_ID
        inner join t_sod_data_class ee on b.data_class_id = ee.DATA_CLASS_ID
        where b.SDB_ID= #{tdbId}
        <if test="status!=null and status !=''">
            AND b.examine_status=#{status}
        </if>
        <if test="typeId!=null and typeId !='0'.toString() and typeId != '9999'.toString()">
            AND b.TYPE_ID=#{typeId}
        </if>
        <if test=" typeId == '0'.toString()">
            and b.type_id != '9999'
        </if>
        <if test=" typeId == '9999'.toString()">
            and (b.type_id = '9999' or b.type_id is null)
        </if>
        )M
        GROUP BY
        M.CLASS_NAME,M.DATA_CLASS_ID,M.DATA_SERVICE_NAME,M.D_DATA_ID,M.SPECIAL_DATABASE_NAME,M.SPECIAL_DATABASE_ID,M.TABLE_NAME,M.DATA_TYPE
        ORDER BY M.DATA_CLASS_ID
    </select>
    <!-- 获取资料申请 -->
    <select id="getDataAuthorityList" resultType="java.util.Map" parameterType="java.util.Map">
        select
        t3.database_id,t6.class_name as "categoryName",t1.apply_id
        ,t1.apply_authority,t1.authorize,t1.create_time,t1.cause,
        t3.table_name ,t4.SCHEMA_NAME_CN as "databaseSchemaName",
        t4.schema_name,t4.database_define_id,t5.database_name as "databaseName"
        from
        T_SOD_DATA_AUTHORITY_APPLY t1
        left join T_SOD_DATACLASS_TABLE dlt on dlt.TABLE_ID = t1.table_id
        left join T_SOD_DATA_AUTHORITY_APPLY_FLOW t2 on t1.apply_id = t2.id
        left join T_SOD_DATA_TABLE_INFO t3 on t1.table_id = t3.id
        left join t_sod_database t4 on t3.database_id = t4.id
        left join t_sod_database_define t5 on t4.database_define_id = t5.id
        left join t_sod_data_class t6 on substr(dlt.data_class_id,0,1) = t6.data_class_id
        where
        1=1
        <if test="userId != null and userId != ''">
            and t2.user_id = #{userId}
        </if>
        <if test="applyAuthority != null and applyAuthority != ''">
            and t1.apply_authority = #{applyAuthority}
        </if>
        <if test="logicId != null and logicId != ''">
            and t5.id = #{logicId}
        </if>
        <if test="dataName != null and dataName != ''">
            and t3.table_name like CONCAT('%',#{dataName},'%')
        </if>
        <if test="category != null and category != ''">
            and substr(dlt.data_class_id,0,1) = #{category}
        </if>
        <if test="schemaId != null and schemaId != ''">
            and t4.id = #{schemaId}
        </if>
        order by
        t1.create_time desc
    </select>
    <select id="querySpecialByUserIdAndUseStatus" resultType="java.util.Map">
        select a.*, '' as cause,b.web_username,b.dept_name from T_SOD_DATABASE_SPECIAL a,t_sod_user b
        where a.user_id = b.user_name and a.USER_ID = #{userId} and a.USE_STATUS =#{useStatus}
        union
        select a.*, '' as cause,b.web_username,b.dept_name from T_SOD_DATABASE_SPECIAL a,t_sod_user b
        where a.user_id = b.user_name and a.id in (select sdb_id from T_SOD_DATABASE_SPECIAL_ACCESS where USER_ID =
        #{userId} and USE_STATUS = #{useStatus})
        <if test="useStatus != 3">
            union
            select a.*, 'WAITCHECK' as cause,b.web_username,b.dept_name from T_SOD_DATABASE_SPECIAL a,t_sod_user b where
            a.user_id = b.user_name and a.id in (select sdb_id from T_SOD_DATABASE_SPECIAL_ACCESS where USER_ID =
            #{userId} and USE_STATUS ='1' and examine_status='1')
        </if>
    </select>


    <!-- 查询资料分类 -->
    <select id="getDataCategory" resultType="java.util.Map">
        select DATA_CLASS_ID as "id", CLASS_NAME as "name"
        from T_SOD_DATA_CLASS
        where PARENT_CLASS_ID = '0'
        order by DATA_CLASS_ID asc
    </select>
    <!-- 根据物理库获取schema -->
    <select id="getSchemaByPhysic" parameterType="java.lang.String" resultType="java.util.Map">
        select database_id as "id", special_database_name ||'【'||database_schema_name||'】' as "name",database_id as
        "physicId" from t_sod_database_define
        where database_classify = '物理库'
        <if test="physicId != null and physicId != ''">
            and database_id = #{physicId}
        </if>
        union
        select dpd.database_id as "id",dpd.special_database_name ||'【'||dpd.database_schema_name||'】' as "name"
        ,dpd.parent_id as "physicId"
        from t_sod_database_define dpd left join T_SOD_DATABASE_SPECIAL sdc
        on dpd.tdb_id = sdc.tdb_id
        where dpd.database_classify = '专题库'
        and sdc.EXAMINE_STATUS = '2' and sdc.USE_STATUS = '2'
        <if test="physicId != null and physicId != ''">
            and dpd.parent_id = #{physicId}
        </if>
        <if test="userId != null and userId != ''">
            and sdc.user_id = #{userId}
        </if>
    </select>

    <!-- 下面根据专题库ID和存储编码来修改分类ID -->
    <update id="changeDataStatus" parameterType="java.util.Map">
        update T_SOD_DATABASE_SPECIAL_READ_WRITE
        set examine_status=3
        where sdb_id = #{tdbId}
          and DATA_CLASS_ID = #{data_class_id}
          and database_id = #{physical}
    </update>
    <!-- 修改datauathor表中数据 -->
    <update id="changeDataAuthorStatus" parameterType="java.util.Map">
        update T_SOD_DATA_AUTHORITY_APPLY
        set AUTHORIZE = null
        where QTDB_ID = #{tdbId}
          and DATA_CLASS_ID = #{data_class_id}
          and DATABASE_ID = #{physical}
    </update>
    <!-- 下面根据专题库ID号、资料存储编码和物理库ID删除对应专题库信息 -->
    <delete id="deleteRecordByTdbId" parameterType="Map">
        delete from T_SOD_DATABASE_SPECIAL_READ_WRITE
        <trim prefix="where" prefixOverrides="and | or">
            <if test="tdbId != null and tdbId !=''">
                and sdb_id=#{tdbId}
            </if>
            <if test="dataClassId != null and dataClassId !=''">
                and DATA_CLASS_ID=#{dataClassId}
            </if>
            <if test="databaseId != null and databaseId !=''">
                and DATABASE_ID=#{databaseId}
            </if>
        </trim>
    </delete>
    <delete id="deleteDataAuthor" parameterType="java.util.Map">
        <!--        delete from T_SOD_DATA_APPLY-->
        <!--        <trim prefix="where" prefixOverrides="and | or">-->
        <!--            <if test="tdbId != null and tdbId !=''">-->
        <!--                and QTDB_ID=#{tdbId}-->
        <!--            </if>-->
        <!--            <if test="dataClassId != null and dataClassId !=''">-->
        <!--                and DATA_CLASS_ID=#{dataClassId}-->
        <!--            </if>-->
        <!--            <if test="databaseId != null and databaseId !=''">-->
        <!--                and DATABASE_ID=#{databaseId}-->
        <!--            </if>-->
        <!--        </trim>-->
    </delete>
    <!-- 专题库删除节点的同时 更新节点下的资料为未分类 -->
    <update id="delTreeUpdateTypeId" parameterType="java.util.Map">
        update T_SOD_DATABASE_SPECIAL_READ_WRITE
        set type_id ='9999'
        where sdb_id = #{tdb_id}
          and type_id = #{type_id}
    </update>
    <!-- 下面根据专题库ID和存储编码来修改分类ID -->
    <update id="updateTypeIdByTdbId" parameterType="java.util.Map">
        update T_SOD_DATABASE_SPECIAL_READ_WRITE
        set
        <trim suffixOverrides=",">
            <if test="typeId != null and typeId !=''">
                TYPE_ID=#{typeId},
            </if>
        </trim>
        where sdb_id=#{tdbId} and DATA_CLASS_ID=#{dataClassId}
    </update>
    <!-- 下面根据用户ID和专题库ID取得用户专题库申请信息 -->
    <select id="getAllRecordByUserId" parameterType="String" resultType="DatabaseSpecialEntity">
        select
        <include refid="Base_Column_List"/>
        from T_SOD_DATABASE_SPECIAL_ACCESS
        where USER_ID = #{_parameter}
    </select>
    <!-- 插入一条记录 -->
    <insert id="saveOneRecord" parameterType="com.piesat.dm.entity.special.DatabaseSpecialAccessEntity">
        insert into dmin_special_db_accessapply
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tdbId != null and tdbId != ''">
                TDB_ID,
            </if>
            <if test="userId != null and userId !=''">
                USER_ID,
            </if>
            <if test="accessAuthority != null">
                ACCESS_AUTHORITY,
            </if>
            <if test="applyTime !=null">
                APPLY_TIME,
            </if>
            <if test="uses != null and uses !='' ">
                USES,
            </if>
            <if test="examiner != null and examiner !=''">
                EXAMINER,
            </if>
            <if test="examineStatus != null and examineStatus !=''">
                EXAMINE_STATUS,
            </if>
            <if test="examineTime != null">
                EXAMINE_TIME,
            </if>
            <if test="cause != null and cause !=''">
                CAUSE,
            </if>
            <if test="useStatus != null and useStatus !=''">
                USE_STATUS,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="tdbId != null and tdbId != ''">
                #{tdbId},
            </if>
            <if test="userId != null and userId !=''">
                #{userId},
            </if>
            <if test="accessAuthority != null">
                #{accessAuthority},
            </if>
            <if test="applyTime !=null">
                #{applyTime},
            </if>
            <if test="uses != null and uses !='' ">
                #{uses},
            </if>
            <if test="examiner != null and examiner !=''">
                #{examiner},
            </if>
            <if test="examineStatus != null and examineStatus !=''">
                #{examineStatus},
            </if>
            <if test="examineTime != null">
                #{examineTime},
            </if>
            <if test="cause != null and cause !=''">
                #{cause},
            </if>
            <if test="useStatus != null and useStatus !=''">
                #{useStatus},
            </if>
        </trim>
    </insert>
    <!-- 根据用户id，查询该用户所有自建专题库下申请访问的资料(既包含申请访问资料，又包含私有资料) -->
    <select id="getSpecialAuthorizeList" parameterType="java.lang.String" resultType="java.util.Map">
        select a.*, b.*, c.table_name
        from T_SOD_DATABASE_SPECIAL_READ_WRITE a
                 left join T_SOD_DATABASE_SPECIAL b on b.TDB_ID = a.TDB_ID
                 left join (
            select *
            from t_sod_data_table aa
                     left join T_SOD_DATA_LOGIC bb on aa.TABLE_ID = bb.TABLE_ID) c on (c.DATA_CLASS_ID = a.DATA_CLASS_ID
            and c.database_id = a.LOGIC_ID)
        where c.USER_ID = #{userId}
          and a.AUTHORIZE = 1
          AND b.USE_STATUS = '2'
          AND b.EXAMINE_STATUS = '2' "
    </select>
    <update id="updateDataAuthorityStatus">
        update T_SOD_DATA_AUTHORITY_APPLY
        set AUTHORIZE=#{AUTHORIZE}
        <where>
            <if test="DATA_CLASS_ID != null">
                and DATA_CLASS_ID = #{DATA_CLASS_ID}
            </if>
            <if test="DATABASE_ID != null  and DATABASE_ID  != ''">
                and DATABASE_ID = #{DATABASE_ID}
            </if>
            <if test="apply_id != null  and apply_id  != ''">
                and id = #{apply_id}
            </if>
        </where>
    </update>
    <select id="getRecentOnlineTime" resultType="java.util.Map">
        select databegintime as "BEGIN_TIME",
               dataendtime   as "END_TIME"
        from T_SOD_ARCHIVE_INFO
        where PRODUCTIONCODE = #{ctsCode}
    </select>
    <sql id="Base_Column_List">
        TDB_ID
        , TDB_NAME, TDB_IMG, UNIT_ID, USER_ID, APPLY_TIME, USES, APPLY_FILE_PATH, EXAMINER,
	    EXAMINE_STATUS, EXAMINE_TIME, CAUSE, USE_STATUS ,SORT_NO
    </sql>

    <!-- 查询用户可申请资料 -->
    <select id="getApplyDataInfo" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT C.DATABASE_ID,C.TABLE_NAME,B.DATABASE_CLASSIFY,B.SCHEMA_NAME,B.SCHEMA_NAME_CN,BB.DATABASE_NAME,C.ID
        TABLE_ID,(
        SELECT WM_CONCAT(CLASS_NAME) FROM T_SOD_DATA_CLASS D INNER JOIN T_SOD_DATACLASS_TABLE E ON D."DATA_CLASS_ID" =
        E."DATA_CLASS_ID" WHERE E."TABLE_ID" = C.ID
        <if test="className != null and className != ''">
            AND CLASS_NAME LIKE '%${className}%'
        </if>
        ) CLASS_NAME,B.DATABASE_DEFINE_ID,F.USER_ID OWNER FROM T_SOD_DATABASE_AUTHORIZED A
        INNER JOIN T_SOD_DATABASE B ON A."DATABASE_ID" = B."DATABASE_DEFINE_ID"
        INNER JOIN T_SOD_DATABASE_DEFINE BB ON B."DATABASE_DEFINE_ID" = BB."ID"
        INNER JOIN T_SOD_DATA_TABLE_INFO C ON B."ID" = C."DATABASE_ID" AND EXISTS (SELECT 1 FROM T_SOD_DATACLASS_TABLE
        WHERE TABLE_ID = C.ID)
        AND NOT EXISTS (
        SELECT 1 FROM T_SOD_DATA_AUTHORITY_APPLY WHERE USER_ID = #{userId} AND TABLE_ID = C."ID"
        )
        LEFT JOIN T_SOD_DATABASE_SPECIAL F ON B.TDB_ID = F.ID
        <where>
            <if test="userId != null and userId != ''">
                A.DB_USERNAME = #{userId}
            </if>
            <if test="databaseId != null and databaseId != ''">
                AND BB.ID = #{databaseId}
            </if>
            <if test="schemaId != null and schemaId != ''">
                AND B.ID = #{schemaId}
            </if>

            <if test="tableName != null and tableName != ''">
                AND C.TABLE_NAME LIKE '%${tableName}%'
            </if>
        </where>
        order by
        C.DATABASE_ID asc
    </select>

    <select id="getDataClassInfo" resultType="java.util.LinkedHashMap">
        SELECT *
        FROM T_SOD_DATA_CLASS A
        WHERE A.DATA_CLASS_ID = #{dataClassId}
    </select>
    <select id="selectTabOmincmccTempele" resultType="java.util.LinkedHashMap">
        SELECT *
        FROM TAB_OMIN_CM_CC_TEMPELE A
        WHERE (A.C_OPT_TYPE is null or A.C_OPT_TYPE <![CDATA[ <> ]]>
        'delete')
          and A.C_COREMETA_ID = #{C_COREMETA_ID}
    </select>
    <select id="selectGridAreaDefine" resultType="java.util.LinkedHashMap">
        SELECT *
        FROM T_SOD_GRID_AREA a
        where a.data_service_id = #{dataClassId};
    </select>

    <select id="getDataclassTreeByClassIds" resultType="java.util.LinkedHashMap" parameterType="java.util.List">
        SELECT TYPE, DATA_CLASS_ID ,CLASS_NAME ,PARENT_ID,MAX(LEVEL) LEVEL FROM ( SELECT TYPE, DATA_CLASS_ID ,CLASS_NAME
        ,PARENT_ID,level LEVEL
        FROM T_SOD_DATA_CLASS
        START WITH DATA_CLASS_ID IN
        <foreach collection="list" item="e" separator="," open="(" close=")">
            #{e}
        </foreach>
        CONNECT BY PRIOR PARENT_ID = DATA_CLASS_ID ORDER BY id ) GROUP BY TYPE, DATA_CLASS_ID ,CLASS_NAME ,PARENT_ID
    </select>


    <select id="getDataClassByBizUserOrDatabase" parameterType="String" resultType="java.util.LinkedHashMap">
        select d.DATA_CLASS_ID,c.DATABASE_DEFINE_ID from T_SOD_DATA_AUTHORITY_APPLY_FLOW a
        left join T_SOD_DATA_AUTHORITY_APPLY b on a.id=b.apply_id
        left join T_SOD_DATACLASS_TABLE d on b.table_id = d.table_id
        left join T_SOD_DATA_TABLE_INFO e on b.table_id = e.id
        left join t_sod_database c on e.database_id = c.id
        left join t_sod_database_define c1 on c.database_define_id = c1.id
        <where>
            b.authorize = 1
            <if test="bizUserId != null and bizUserId != ''">
                and a.user_id = #{bizUserId}
            </if>
            <if test="database_id != null and database_id != ''">
                and c1.id = #{database_id}
            </if>
        </where>
    </select>


    <select id="getDataInfoByUserId" resultType="java.util.Map">
        select nvl(sna.id,(sdc.data_class_id || srw.sdb_id)) as APPLY_ID,srw.sdb_id,
        sdc.class_name dataname,sdc.data_class_id,sdb.id as SCHEMAID,sdc.D_DATA_ID,
        wm_concat(dit.TABLE_NAME) as TABLE_NAME,sdb.SCHEMA_NAME_CN || '【' ||
        sdb.schema_name || '】' as schemaName,
        sdd.id as PHYSICSID,sdd.DATABASE_NAME PHYSICNAME,sdc.is_access is_publish
        from T_SOD_DATA_TABLE_INFO dit
        inner join T_SOD_DATACLASS_TABLE sdl on dit.id = sdl.table_id or dit.id = sdl.sub_table_id
        inner join T_SOD_DATA_CLASS sdc on sdl.data_class_id = sdc.data_class_id
        inner join T_SOD_DATABASE sdb on dit.database_id = sdb.id
        inner join T_SOD_DATABASE_DEFINE sdd on sdb.database_define_id = sdd.id
        left join T_SOD_DATABASE_SPECIAL_READ_WRITE srw on srw.data_class_id = sdc.data_class_id
        left join T_SOD_NEWDATA_APPLY sna on sna.data_class_id = sdc.data_class_id
        where dit.user_id = #{userId}
        <if test="dataClassId != null and dataClassId != ''">
            and sdc.DATA_CLASS_ID = #{dataClassId}
        </if>
        group by
        sna.id,srw.sdb_id,
        dataname,sdc.DATA_CLASS_ID ,sdb.id,sdc.D_DATA_ID,
        sdb.database_name,sdb.schema_name,
        sdd.id,sdd.DATABASE_NAME,sdc.is_access
        order by sdc.data_class_id asc
    </select>

    <!-- 获取专题库自建资料 -->
    <select id="getSpecialDBData" resultType="java.util.Map">
        select nvl(sna.id, (sdc.DATA_CLASS_ID || srw.SDB_ID))      as APPLY_ID,
               srw.SDB_ID,
               sdc.class_name                                         dataname,
               sdc.DATA_CLASS_ID,
               sdb.id                                              as SCHEMAID,
               sdc.D_DATA_ID,
               srw.database_id,
               wm_concat(sdt.TABLE_NAME)                           as TABLE_NAME,
               sdb.SCHEMA_NAME_CN || '【' || sdb.schema_name || '】' as schemaName,
               sdd.id                                                 PHYSICSID,
               sdd.DATABASE_NAME                                      PHYSICNAME,
               sdc.is_access                                          is_publish
        from T_SOD_DATABASE_SPECIAL_READ_WRITE srw
                 inner join T_SOD_DATA_CLASS sdc on srw.data_class_id = sdc.data_class_id
                 inner join T_SOD_DATACLASS_TABLE sdl on sdc.data_class_id = sdl.data_class_id
                 inner join T_SOD_DATA_TABLE_INFO sdt on (sdt.id = sdl.table_id or sdt.id = sdl.sub_table_id) and
                                                         srw.database_id = sdt.database_id
                 inner join T_SOD_DATABASE sdb on srw.database_id = sdb.id
                 inner join T_SOD_DATABASE_DEFINE sdd on sdb.database_define_id = sdd.id
                 left join T_SOD_NEWDATA_APPLY sna on sna.data_class_id = sdc.data_class_id
        where srw.data_type = '1'
          and srw.sdb_id = #{sdbId}
        group by sna.id,
                 dataname, sdc.DATA_CLASS_ID, srw.SDB_ID, srw.database_id, sdc.D_DATA_ID, sdb.id,
                 sdb.database_name, sdb.schema_name,
                 sdd.id, sdd.DATABASE_NAME, sdc.is_access
    </select>

    <select id="getDataClassTree" parameterType="String" resultType="DataClassEntity">
        select distinct t.data_class_id dataClassId, parent_id parentId, class_name className
        from t_sod_data_class t start
        with t.data_class_id in (
            select data_class_id from T_SOD_DATACLASS_TABLE a, T_SOD_DATA_TABLE_INFO b where a.table_id = b.id and database_id=#{databaseId})
        connect by t.data_class_id= prior t.parent_id
        order by t.data_class_id asc
    </select>
    <select id="getDataClassTreePostgresql" parameterType="String" resultType="DataClassEntity">
        WITH RECURSIVE r AS (
            select distinct t.data_class_id, t.parent_id, t.class_name
            from t_sod_data_class t
            where t.data_class_id
                      in (
                      select data_class_id from t_sod_data_logic where database_id = #{databaseId}
                  )
            union
            select t.data_class_id, t.parent_id, t.class_name
            from t_sod_data_class t,
                 r
            where t.data_class_id = r.parent_id
        )
        select data_class_id dataClassId, parent_id parentId, class_name className
        from r
        order by r.data_class_id asc
    </select>
    <select id="getArchive" parameterType="String" resultType="java.util.Map">
        SELECT C.*
        FROM (SELECT A.C_DATUM_CODE, A.C_SOURSDATUM_CODE, LEVEL L
              FROM TAB_OMIN_CM_CC_DATUMTYPEHYP A
                  START
              WITH A.C_DATUM_CODE = #{ddataid}
              CONNECT BY PRIOR A.C_SOURSDATUM_CODE = A.C_DATUM_CODE) B,
             T_SOD_ARCHIVE_INFO C
        WHERE L = 2
          AND B.C_SOURSDATUM_CODE = C.PRODUCTIONCODE
    </select>
    <select id="getDatabaseName" resultType="java.util.Map">
        select t.id                                                   ID,
               concat(concat(d.database_name, '_'), t.SCHEMA_NAME_CN) DATABASE_NAME,
               d.database_type                                        DATABASE_TYPE
        from T_SOD_DATABASE t
                 inner join T_SOD_DATABASE_DEFINE d on t.DATABASE_DEFINE_ID = d.id and d.user_display_control != '2'
    </select>
    <select id="getByDatabaseDefineId" parameterType="String" resultType="java.util.Map">
        select *
        from T_SOD_DATABASE t
        where t.DATABASE_DEFINE_ID = #{id}
    </select>


    <!--用户申请的文件索引库的资料-->
    <select id="getApplyedRecodeFileDataInfo" resultType="java.util.Map" parameterType="String">
        select dl.data_class_id,
               dt.database_id,
               dd.authorize,
               dd.apply_authority,
               sdn.dir_norm,
               dt.name_cn,
               dt.table_name,
               da.user_id,
               sdb.SCHEMA_NAME_CN as "special_name",
               sdb.schema_name,
               sdd.database_name  as "database_name",
               sdd.id             as "database_define_id",
               sdc.class_name
        from T_SOD_DATA_AUTHORITY_APPLY dd
                 left join T_SOD_DATACLASS_TABLE dl on dl.table_id = dd.table_id or dl.sub_table_id = dd.table_id
                 left join t_sod_dataclass_norm sdn on sdn.id = dd.data_class_id
                 left join T_SOD_DATA_TABLE_INFO dt
                           on (dt.id = dl.table_id or dt.id = dl.sub_table_id) and dt.database_id = dd.database_id
                 left join T_SOD_DATA_AUTHORITY_APPLY_FLOW da on dd.apply_id = da.id
                 left join t_sod_database sdb on dt.database_id = sdb.id
                 left join t_sod_database_define sdd on sdb.database_define_id = sdd.id
                 left join t_sod_data_class sdc on substr(dd.data_class_id, 1, 1) = sdc.data_class_id
        where da.user_id = #{userId}
          and sdd.id = 'FIDB'
          and dd.authorize = '1'
        order by da.create_time desc,
                 dd.authorize asc
    </select>
    <!--用户申请的文件索引库的资料-->
    <select id="getSpecialReadWriteFileDataInfo" resultType="java.util.Map" parameterType="String">
        select a.data_class_id,
               a.database_id,
               a.examine_status   as "authorize",
               a.apply_authority,
               sdn.dir_norm,
               dt.name_cn,
               dt.table_name,
               b.user_id,
               sdb.SCHEMA_NAME_CN as "special_name",
               sdb.schema_name,
               sdd.database_name  as "database_name",
               sdd.id             as "database_define_id",
               sdc.class_name
        from T_SOD_DATABASE_SPECIAL_READ_WRITE a
                 left join T_SOD_DATABASE_SPECIAL b on b.id = a.sdb_ID
                 left join T_SOD_DATACLASS_TABLE dl on dl.data_class_id = a.data_class_id
                 left join t_sod_dataclass_norm sdn on sdn.id = a.data_class_id
                 left join T_SOD_DATA_TABLE_INFO dt
                           on (dt.id = dl.table_id or dt.id = dl.sub_table_id) and dt.database_id = a.database_id
                 left join t_sod_database sdb on a.database_id = sdb.id
                 left join t_sod_database_define sdd on sdb.database_define_id = sdd.id
                 left join t_sod_data_class sdc on substr(a.data_class_id, 1, 1) = sdc.data_class_id
        where b.USER_ID = #{userId}
          and b.USE_STATUS = '2'
          AND a.EXAMINE_STATUS = '1'
          and sdd.id = 'FIDB'
    </select>


    <select id="findAuthorityList" resultType="java.util.Map" parameterType="String">
        SELECT *
        FROM T_SOD_DATA_AUTHORITY_APPLY_FLOW A
                 INNER JOIN T_SOD_DATA_AUTHORITY_APPLY B ON A."ID" = B."APPLY_ID"
                 LEFT JOIN T_SOD_USER C ON A."USER_ID" = C."USER_NAME"
        WHERE B."TABLE_ID" = #{tableId}
    </select>

    <select id="getRecycle" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT DISTINCT A.ID TABLE_ID,A.TABLE_TYPE,A.TABLE_NAME,A.DATABASE_ID, C.DATABASE_NAME, B.SCHEMA_NAME_CN,
        B.SCHEMA_NAME, D.DICT_LABEL
        FROM T_SOD_DATA_TABLE_INFO A
        LEFT JOIN T_SOD_DATABASE B ON A.DATABASE_ID = B.ID
        LEFT JOIN T_SOD_DATABASE_DEFINE C ON B.DATABASE_DEFINE_ID = C.ID
        LEFT JOIN T_SOD_DICT_DATA D ON A.STORAGE_TYPE = D.DICT_VALUE
        WHERE DEL_FLAG = '2'
        <if test="map.tableName != null and map.tableName  != ''">
            AND A.TABLE_NAME LIKE '%${map.tableName}%'
        </if>
        <if test="map.databaseId != null and map.databaseId  != ''">
            AND B.ID = #{map.databaseId}
        </if>
        <if test="map.databasePid != null and map.databasePid  != ''">
            AND C.ID = #{map.databasePid}
        </if>
    </select>
</mapper>
